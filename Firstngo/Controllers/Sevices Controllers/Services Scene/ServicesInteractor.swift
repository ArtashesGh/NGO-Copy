//
//  ServicesInteractor.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 3/6/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ServicesBusinessLogic
{
    func doGetUserOrders(request: Services.Something.Request)
}

protocol ServicesDataStore
{
    var orderId: String { get set }
}

class ServicesInteractor: ServicesBusinessLogic, ServicesDataStore
{
    var presenter: ServicesPresentationLogic?
    var worker: ServicesWorker?
    var orderId: String = ""
    
    // MARK: Do something
    
    func doGetUserOrders(request: Services.Something.Request)
    {
        worker = ServicesWorker()
//        presenter?.showLoader()
        _ = worker?.doGetUserServices(page: request.page,
                                      completion:  { response in
                                        if (response.isSuccess) {
                                            self.presenter?.hideLoader()
                                            let orderSInfo: [[String:Any]] = response.data?["object"] as! [[String:Any]]
                                            var orders:[UserOrder] = []
                                            
                                            do{
                                                for orderInfo in orderSInfo {
                                                    let jsonData = try? JSONSerialization.data(withJSONObject:orderInfo)
                                                    let ord = try  JSONDecoder().decode(UserOrder.self,from: jsonData!)
                                                    orders.append(ord)
                                                }
                                                self.presenter?.presentSuccess(orders:orders)
                                            }catch let jsonErr {
                                                print(jsonErr)
                                            }
                                            
                                        } else {
                                            self.presenter?.hideLoader()
                                            self.presenter?.presentError(error: response.errorForUser)
                                        }
                                        
        })
    }
    
}

struct UserOrder: Codable {
    var id : Int
    var status : String?
    var productName : String?
}
