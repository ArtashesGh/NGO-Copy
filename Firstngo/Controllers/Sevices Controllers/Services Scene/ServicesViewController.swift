//
//  ServicesViewController.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 3/6/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ServicesDisplayLogic: class
{
    func displayGetUserOrderSuccess(orders:[UserOrder])
    func displayError()
    func showLoader()
    func hideLoader()
}

class ServicesViewController: UIViewController, ServicesDisplayLogic
{
    var interactor: ServicesBusinessLogic?
    var router: (NSObjectProtocol & ServicesRoutingLogic & ServicesDataPassing)?
    
    @IBOutlet weak var backView: UIView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var addButton: UIButton!
    @IBOutlet weak var chatButton: UIButton!
    var page: Int = 0
    var displeyedData:[UserOrder] = []
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ServicesInteractor()
        let presenter = ServicesPresenter()
        let router = ServicesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
         doGetUserOrders(pages: page)
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        backView.roundCorners(corners: .topRight, radius: 50)
        addButton.roundCorners(corners:[.topLeft, .bottomLeft], radius: 20.0)
    }
    
    // MARK: Do something
    
    func doGetUserOrders(pages:Int)
    {
        let request = Services.Something.Request(page: "\(pages)")
        interactor?.doGetUserOrders(request: request)
    }
    
    func displayGetUserOrderSuccess(orders:[UserOrder]) {
        DispatchQueue.main.async {
            self.displeyedData = orders
//            for displeyElement in orders {
//
//                self.displeyedData.append(displeyElement)
//            }
//
            if self.displeyedData.count < 1 {
                self.tableView.isHidden = true
                return
            }
            
            self.tableView.isHidden = false
            self.tableView.reloadData()
        }
    }
    
    func displayError() {
        //           DispatchQueue.main.async {
        //               self.errorView.isHidden = false
        //               self.topConstraint.constant = self.topErrorConstraintHeight
        //           }
    }
    
    //MARK: - Hide & Show Loader
    
    func showLoader() {
        view.showLoader()
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.view.removeLoader()
        }
    }
    
    // MARK: - Actions
    
    @IBAction func addButtonAction(_ sender: Any) {
        router?.routeToAllServices()
    }
    
    @IBAction func chatButtonAction(_ sender: Any) {
        router?.routeToChat()
    }
}
extension ServicesViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displeyedData.count
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier:"UserServicesTableViewCell") as! UserServicesTableViewCell
        let displeyElemnt = displeyedData[indexPath.row]
        
        cell.servicesNameLabel.text = displeyElemnt.productName ?? ""
        cell.serviceTypeLabel.textInsets = UIEdgeInsets(top: 2, left: 8, bottom: 2, right: 8)
        cell.serviceTypeLabel.layer.cornerRadius = 9.0
        cell.serviceTypeLabel.clipsToBounds = true
        switch displeyElemnt.status {
        case "COMPLETE":
            cell.serviceTypeLabel.text = "Выполнена"
            cell.serviceTypeLabel.backgroundColor = Constants.Colors.orderGreenColor
        case "INPROGRESS":
            cell.serviceTypeLabel.text = "В процессе выполнения"
            cell.serviceTypeLabel.backgroundColor = Constants.Colors.orderSirenColor
        case "NOTPAID":
            cell.serviceTypeLabel.text = "Не оплачено"
            cell.serviceTypeLabel.backgroundColor = Constants.Colors.orderRedColor
        case "PAID":
            cell.serviceTypeLabel.text = "Оплачено, готово к отправке"
            cell.serviceTypeLabel.backgroundColor = Constants.Colors.orderBlueColor
        case "REVISION":
            cell.serviceTypeLabel.text = "На доработке"
            cell.serviceTypeLabel.backgroundColor = Constants.Colors.orderGreyColor
            
        default:
            print(displeyElemnt.status ?? "")
        }
       
        //        cell.title.text = displeyElements[indexPath.row].titleRu
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        let displeyElemnt = displeyedData[indexPath.row]
        router?.dataStore?.orderId = "\(displeyElemnt.id)"
        router?.routeToOrderViewController()
        
    }
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if displeyedData.count-1 == indexPath.row && displeyedData.count > 2  {
//            getMoreImages()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }
    
    func getMoreImages(){
        self.page += 1
        doGetUserOrders(pages: self.page)
    }
}
