//
//  ChatViewController.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 3/10/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChatDisplayLogic: class
{
    func displaySomething(viewModel: Chat.Something.ViewModel)
    func displaySendSucces(chatItem: ChatInfo)
    func displeyGetUser(userInfo: User)
    func displayError()
    func showLoader()
    func hideLoader()
}

class ChatViewController: UIViewController, ChatDisplayLogic
{
    var interactor: ChatBusinessLogic?
    var router: (NSObjectProtocol & ChatRoutingLogic & ChatDataPassing)?
    
    @IBOutlet weak var backView: UIView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var avatarImage: UIImageView!
    @IBOutlet weak var adminNameLabel: UILabel!
    @IBOutlet weak var bottomView: UIView!
    @IBOutlet weak var textInputeView: UIView!
    @IBOutlet weak var chatTextField: UITextField!
    @IBOutlet weak var sendButton: UIButton!
    @IBOutlet weak var bottomConstraint: NSLayoutConstraint!
    @IBOutlet weak var avatarBackView: UIView!
    @IBOutlet weak var heigtConstraint: NSLayoutConstraint!
    @IBOutlet weak var bottomBackView: UIView!
    @IBOutlet weak var navView: UIView!
    
    var page: Int = 0
    var userId: Int = 0
    var displeyedData:[ChatInfo] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ChatInteractor()
        let presenter = ChatPresenter()
        let router = ChatRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        interactor?.doGetProfile()
        doGetChatInfo(pages: page)
        let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(UIViewController.dismissKeyboard))
        view.addGestureRecognizer(tap)
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        backView.roundCorners(corners: .bottomLeft, radius: 50)
        navView.roundCorners(corners: .bottomLeft, radius: 50)
        textInputeView.roundCorners(corners: [.bottomLeft, .topLeft], radius: 30)
        bottomBackView.roundCorners(corners: [.bottomLeft, .topLeft], radius: 30)
        backView.layer.borderWidth = 1
        backView.layer.borderColor = Constants.Colors.borderGreyColor.cgColor
        backView.backgroundColor = Constants.Colors.borderGreyColor
        avatarBackView.layer.cornerRadius = 20
        avatarBackView.layer.borderColor = Constants.Colors.borderGreyColor.cgColor
        avatarBackView.layer.borderWidth = 1
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillAppear(notification:)),
                                               name: UIResponder.keyboardWillShowNotification,
                                               object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillDisappear(notification:)),
                                               name: UIResponder.keyboardWillHideNotification,
                                               object: nil)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification , object: nil)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doGetChatInfo(pages:Int)
    {
        let request = Chat.Something.Request(page: "\(pages)")
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Chat.Something.ViewModel)
    {
        DispatchQueue.main.async {
            self.displeyedData = viewModel.chatList.reversed()
            self.tableView.reloadData()
            self.tableView.scrollToBottom()
        }
    }
    
    func displaySendSucces(chatItem: ChatInfo) {
        DispatchQueue.main.async {
            self.chatTextField.text = ""
            self.displeyedData.append(chatItem)
            self.tableView.reloadData()
            self.tableView.scrollToBottom()
        }
    }
    
    func displeyGetUser(userInfo: User) {
        DispatchQueue.main.async {
            self.userId = userInfo.userId
        }
    }
    
    func displayError() {
        //           DispatchQueue.main.async {
        //               self.errorView.isHidden = false
        //               self.topConstraint.constant = self.topErrorConstraintHeight
        //           }
    }
    
    //MARK: - Hide & Show Loader
    
    func showLoader() {
        view.showLoader()
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.view.removeLoader()
        }
    }
    
    @objc override func dismissKeyboard() {
        view.endEditing(true)
    }
    
    // MARK: - Actions
    
    @IBAction func backButtonAction(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    
    @IBAction func sendButtonAction(_ sender: Any) {
        if chatTextField.text != "" {
            interactor?.doSendMessage(message: chatTextField.text ?? "")
        }
    }
    
    //    MARK: - Keyboard Show & Hide
    @objc
    func keyboardWillAppear(notification: NSNotification?) {
        
        guard let keyboardFrame = notification?.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue else {
            return
        }
        
        let keyboardHeight: CGFloat
        if #available(iOS 11.0, *) {
            keyboardHeight = keyboardFrame.cgRectValue.height - self.view.safeAreaInsets.bottom
        } else {
            keyboardHeight = keyboardFrame.cgRectValue.height
        }
        
        bottomConstraint.constant = keyboardHeight
    }
    
    @objc
    func keyboardWillDisappear(notification: NSNotification?) {
        bottomConstraint.constant = 0
    }
}

extension ChatViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displeyedData.count
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displeyElemnt = displeyedData[indexPath.row]
        if displeyElemnt.userId == self.userId {
            let cell = tableView.dequeueReusableCell(withIdentifier:"UserTableViewCell") as! UserTableViewCell
            cell.messageLabel?.text = displeyElemnt.content ?? ""
            cell.messageLabel.textInsets = UIEdgeInsets(top: 5, left: 10, bottom: 5, right: 25)
            cell.messageLabel.layer.cornerRadius = 10
            cell.messageLabel.clipsToBounds = true
            let dateObjFromString = NSDate(dateString:  displeyElemnt.dateCreate ?? "")
            cell.timeLabel.text = dateObjFromString.getTime()
            return cell
        }
        let cell = tableView.dequeueReusableCell(withIdentifier:"AdminTableViewCell") as! AdminTableViewCell
        cell.chatTextLabel.text = displeyElemnt.content ?? ""
        cell.chatTextLabel.layer.cornerRadius = 10
        cell.chatTextLabel.textInsets = UIEdgeInsets(top: 3, left: 25, bottom: 3, right: 10)
        cell.chatTextLabel.clipsToBounds = true
        let dateObjFromString = NSDate(dateString:  displeyElemnt.dateCreate ?? "")
        cell.timeLabel.text = dateObjFromString.getTime()
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
//        if  indexPath.row == 1 && self.displeyedData.count > 4  {
//            getMoreImages()
//        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let displeyElemnt = displeyedData[indexPath.row]
        return estimatedHeightOfLabel(text: displeyElemnt.content ?? "", leading: 90.0) + 30
    }
    
    func getMoreImages(){
        self.page += 1
        doGetChatInfo(pages: self.page)
    }
    
}
