//
//  OrderInteractor.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 3/9/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OrderBusinessLogic
{
    func doSomething(request: Order.Something.Request)
    func doGetOneOrder(orderID: String)
    func doGetUserOrder(orderID: String)
    func doUploadImage(image: UIImage, displeyElements: [OrderDispleyElement])
    func doOrderCreate(productID: String, docsIds:[[String:Any]])
    func doPayment(orderId: String, paymentData:String)
}

protocol OrderDataStore
{
    var isUserOrder: Bool { get set }
    var orderId: String { get set }
}

class OrderInteractor: OrderBusinessLogic, OrderDataStore
{
    var presenter: OrderPresentationLogic?
    var worker: OrderWorker?
    var isUserOrder: Bool = false
    var orderId: String = ""
    
    // MARK: Do something
    
    func doSomething(request: Order.Something.Request)
    {
        presenter?.presentSomething(isUserOrder:isUserOrder, orderId:orderId)
    }
    
    func doGetOneOrder(orderID: String)
    {
        worker = OrderWorker()
        presenter?.showLoader()
        _ = worker?.doGetOneOrder(productId: orderID,
                                  completion:  { response in
                                    if (response.isSuccess) {
                                        self.presenter?.hideLoader()
                                        let productInfo: [String:Any] = response.data?["object"] as! [String:Any]
                                        
                                        do{
                                            let jsonData = try? JSONSerialization.data(withJSONObject:productInfo)
                                            let product = try  JSONDecoder().decode(Product.self, from: jsonData!)
                                            self.presenter?.presentGetProductSuccess(product: product)
                                        }catch let jsonErr {
                                            print(jsonErr)
                                        }
                                        
                                    } else {
                                        self.presenter?.hideLoader()
                                        self.presenter?.presentError(error: response.errorForUser)
                                    }
                                    
        })
    }
    
    func doGetUserOrder(orderID: String)
    {
        worker = OrderWorker()
        presenter?.showLoader()
        _ = worker?.doGetUserOrder(orderId: orderID,
                                   completion:  { response in
                                    if (response.isSuccess) {
                                        self.presenter?.hideLoader()
                                        let productInfo: [String:Any] = response.data?["object"] as! [String:Any]
                                        
                                        do{
                                            let jsonData = try? JSONSerialization.data(withJSONObject:productInfo)
                                            let orderElement = try  JSONDecoder().decode(OrderElement.self, from: jsonData!)
                                            self.presenter?.presentGetOrderSuccess(product: orderElement)
                                        }catch let jsonErr {
                                            print(jsonErr)
                                        }
                                        
                                    } else {
                                        self.presenter?.hideLoader()
                                        self.presenter?.presentError(error: response.errorForUser)
                                    }
                                    
        })
    }
    
    func doUploadImage(image: UIImage, displeyElements: [OrderDispleyElement])
    {
        worker = OrderWorker()
        presenter?.showLoader()
        _ = worker?.doUploadFile(image: image,
                                 completion:  { response in
                                    if (response.isSuccess) {
                                        self.presenter?.hideLoader()
                                        let productInfo: [String:Any] = response.data?["object"] as! [String:Any]
                                        
                                        do{
                                            let jsonData = try? JSONSerialization.data(withJSONObject:productInfo)
                                            let orderElement = try  JSONDecoder().decode(UserAndAdminDoc.self, from: jsonData!)
                                            self.presenter?.presentPostUploadSuccess(doc: orderElement, displeyElements: displeyElements)
                                        }catch let jsonErr {
                                            print(jsonErr)
                                        }
                                        
                                    } else {
                                        self.presenter?.hideLoader()
                                        self.presenter?.presentError(error: response.errorForUser)
                                    }
                                    
        })
    }
    
    func doOrderCreate(productID: String, docsIds:[[String:Any]]) {
        worker = OrderWorker()
        presenter?.showLoader()
        _ = worker?.doCreateOrder(orderId: productID,
                                  docIds: docsIds,
                                  completion:  { response in
                                    if (response.isSuccess) {
                                        self.presenter?.hideLoader()
                                        self.presenter?.presentSendOrderSuccess()
                                    } else {
                                        self.presenter?.hideLoader()
                                        self.presenter?.presentError(error: response.errorForUser)
                                    }
                                    
        })
    }
    
    func doPayment(orderId: String, paymentData:String) {
        worker = OrderWorker()
        presenter?.showLoader()
        _ = worker?.doPay(orderId: orderId,
                          paymentString: paymentData,
                          completion:  { response in
                            if (response.isSuccess) {
                                self.presenter?.hideLoader()
                                self.presenter?.presentPaymentSucces()
                            } else {
                                self.presenter?.hideLoader()
                                self.presenter?.presentError(error: response.errorForUser)
                            }
                            
        })
    }
}

struct Product: Codable {
    var id : Int
    var name : String?
    var description : String?
    var price : Int?
    var userAgreementAccepted : Bool?
    
}

struct OrderElement: Codable {
    var orderId : Int
    var productName : String?
    var productDescription : String?
    var productPrice : Int?
    var userAgreementAccepted : Bool?
    var status : String?
    var adminComment : String?
    var userDocs: [UserAndAdminDoc]?
    var adminDocs: [UserAndAdminDoc]?
}

struct UserAndAdminDoc: Codable {
    var docId : Int
    var docName : String?
    var creationDateLong : UInt64?
}

struct DocsIDs: Codable {
    var docIds : String
}






