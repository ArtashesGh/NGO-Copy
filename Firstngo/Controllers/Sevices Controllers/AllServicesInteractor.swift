//
//  AllServicesInteractor.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 3/6/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AllServicesBusinessLogic
{
    func doGetServices(request: AllServices.Something.Request)
    func doGetProfile()
}

protocol AllServicesDataStore
{
    var orderId: String { get set }
}

class AllServicesInteractor: AllServicesBusinessLogic, AllServicesDataStore
{
    var presenter: AllServicesPresentationLogic?
    var worker: AllServicesWorker?
    var workerAcoount: AccountWorker?
    var orderId: String = ""
    
    // MARK: Do something
    
    func doGetServices(request: AllServices.Something.Request)
    {
        worker = AllServicesWorker()
        _ = worker?.doGetServices(page: request.page,
                                  completion:  { response in
                                    if (response.isSuccess) {
                                        self.presenter?.hideLoader()
                                        let orderSInfo: [[String:Any]] = response.data?["object"] as! [[String:Any]]
                                        var orders:[AllServiceElement] = []
                                        
                                        do{
                                            for orderInfo in orderSInfo {
                                                let jsonData = try? JSONSerialization.data(withJSONObject:orderInfo)
                                                let ord = try  JSONDecoder().decode(AllServiceElement.self,from: jsonData!)
                                                orders.append(ord)
                                            }
                                            self.presenter?.presentSuccess(allServic:orders)
                                        }catch let jsonErr {
                                            print(jsonErr)
                                        }
                                        
                                    } else {
                                        self.presenter?.hideLoader()
                                        self.presenter?.presentError(error: response.errorForUser)
                                    }
                                    
        })
    }
    
    func doGetProfile() {
        
        workerAcoount = AccountWorker()
        _ = workerAcoount?.doGetProfileWork(completion: { response in
            if (response.isSuccess) {
                self.presenter?.hideLoader()
                let userInfo: [String:Any] = response.data?["object"] as! [String:Any]
                do{
                    let jsonData = try? JSONSerialization.data(withJSONObject:userInfo)
                    let user = try  JSONDecoder().decode(User.self,from: jsonData!)
                    self.presenter?.presentGetProfileSuccess(userInfo: user)
                }catch let jsonErr {
                    print(jsonErr)
                }
            } else {
                self.presenter?.hideLoader()
                self.presenter?.presentError(error: response.errorForUser)
            }
        })
    }
}

struct AllServiceElement: Codable {
    var id : Int
    var name : String?
    var price : Int?
}
