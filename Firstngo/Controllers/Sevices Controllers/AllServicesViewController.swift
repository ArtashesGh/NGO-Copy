//
//  AllServicesViewController.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 3/6/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AllServicesDisplayLogic: class
{
    func displaySomething(viewModel: AllServices.Something.ViewModel)
    func displayGetSuccess(orders:[AllServiceElement])
    func displeyGetUser(userInfo: User)
    func displayError()
    func showLoader()
    func hideLoader()
}

class AllServicesViewController: UIViewController, AllServicesDisplayLogic
{
    var interactor: AllServicesBusinessLogic?
    var router: (NSObjectProtocol & AllServicesRoutingLogic & AllServicesDataPassing)?
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var backView: UIView!
    @IBOutlet weak var errorBackView: UIView!
    @IBOutlet weak var errorView: UIView!
    @IBOutlet weak var okButton: UIButton!
    @IBOutlet weak var okButtonBackView: UIView!
    
    var userAgreementAccepted : Bool = false
    var page: Int = 0
    var displeyedData:[AllServiceElement] = []
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AllServicesInteractor()
        let presenter = AllServicesPresenter()
        let router = AllServicesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doGetServices(pages: page)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.doGetProfile()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        okButton.roundCorners(corners: .topLeft, radius: 50)
        okButtonBackView.roundCorners(corners: .bottomRight, radius: 10)
        backView.roundCorners(corners: .topRight, radius: 50)
    }
    
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doGetServices(pages:Int)
    {
        let request = AllServices.Something.Request(page: "\(pages)")
        interactor?.doGetServices(request: request)
    }
    
    func displaySomething(viewModel: AllServices.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func displayGetSuccess(orders:[AllServiceElement]) {
        DispatchQueue.main.async {
             for displeyElement in orders {
            
                            self.displeyedData.append(displeyElement)
                        }
//            self.displeyedData = orders
            self.tableView.reloadData()
        }
    }
    
    func displeyGetUser(userInfo: User) {
        DispatchQueue.main.async {
            self.userAgreementAccepted = userInfo.userAgreementAccepted ?? false
        }
    }
    
    func displayError() {
        //           DispatchQueue.main.async {
        //               self.errorView.isHidden = false
        //               self.topConstraint.constant = self.topErrorConstraintHeight
        //           }
    }
    
    //MARK: - Hide & Show Loader
    
    func showLoader() {
        view.showLoader()
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.view.removeLoader()
        }
    }
    
    @IBAction func okButtonAction(_ sender: Any) {
        errorBackView.isHidden = true
    }
    
    @IBAction func backButtonAction(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    
    @IBAction func chatButtonAction(_ sender: Any) {
        router?.routeToChat()
    }
}

extension AllServicesViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displeyedData.count
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier:"AllServicesTableViewCell") as! AllServicesTableViewCell
        let displeyElemnt = displeyedData[indexPath.row]
        cell.priceLabel.text = "\(displeyElemnt.price ?? 0)" + " â‚½"
        cell.nameLabel.text = displeyElemnt.name ?? ""
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
//        if userAgreementAccepted {
            let displeyElemnt = displeyedData[indexPath.row]
            router?.dataStore?.orderId = "\(displeyElemnt.id)"
            router?.routeToOrderViewController()
            return
//        }
//        errorBackView.isHidden = false
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if displeyedData.count-1 == indexPath.row && displeyedData.count > 2  {
            getMoreImages()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }
    
    func getMoreImages(){
        self.page += 1
        doGetServices(pages: self.page)
    }
}
