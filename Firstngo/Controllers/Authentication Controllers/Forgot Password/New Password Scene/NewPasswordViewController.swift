//
//  NewPasswordViewController.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 2/24/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewPasswordDisplayLogic: class
{
    func displaySomething(email:String, code:String)
    func displaySuccess()
    func displayError()
    func showLoader()
    func hideLoader()
}

class NewPasswordViewController: UIViewController, NewPasswordDisplayLogic
{
    var interactor: NewPasswordBusinessLogic?
    var router: (NSObjectProtocol & NewPasswordRoutingLogic & NewPasswordDataPassing)?
    
    @IBOutlet weak var newPasswordView: UIView!
    
    @IBOutlet weak var rePasswordTextField: TitleTextField!
    @IBOutlet weak var passwordTextField: TitleTextField!
    @IBOutlet weak var bottomConstraint: NSLayoutConstraint!
    @IBOutlet weak var topConstraint: NSLayoutConstraint!
    @IBOutlet weak var errorView: UIView!
    @IBOutlet weak var newPasswordTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var savePasswordButton: UIButton!
    var email:String = ""
    var code:String = ""
    
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = NewPasswordInteractor()
        let presenter = NewPasswordPresenter()
        let router = NewPasswordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        savePasswordButton.activationState(active: false)
        addTargetsTextField()
        hideKeyboardWhenTappedAround()
        doSomething()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        newPasswordView.roundCorners(corners: .topRight, radius: 50)
        savePasswordButton.roundCorners(corners:[.topLeft, .bottomLeft], radius: 20.0)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillAppear(notification:)),
                                               name: UIResponder.keyboardWillShowNotification,
                                               object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillDisappear(notification:)),
                                               name: UIResponder.keyboardWillHideNotification,
                                               object: nil)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification , object: nil)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        interactor?.doSomething()
    }
    
    func doSave()
    {
        let request = NewPassword.Something.Request(email: email, code:code, password:passwordTextField.text ?? "" )
        interactor?.newPassword(request: request)
    }
    
    func displaySomething(email:String, code:String)
    {
        self.email = email
        self.code = code
    }
    
    func displaySuccess() {
        DispatchQueue.main.async {
            self.router?.routeToWelcome()
        }
    }
    
    func displayError()
    {
        DispatchQueue.main.async {
            self.errorView.isHidden = false
            self.topConstraint.constant = 147
        }
    }
    
    
    //MARK: - Hide & Show Loader
    
    func showLoader() {
        view.showLoader()
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.view.removeLoader()
        }
    }
    
    //MARK: - Actions
    
    @IBAction func savePasswordButtonAction(_ sender: Any) {
        if passwordTextField.text == rePasswordTextField.text {
            doSave()
        }else {
            self.errorView.isHidden = false
            self.topConstraint.constant = 147
        }
    }
    
    @IBAction func backButtonAction(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    
    @IBAction func reSendButtonAction(_ sender: Any) {
    }
    
    
    //MARK: - Target Text Field
    
    func addTargetsTextField() {
        rePasswordTextField.addTarget(self, action: #selector(editingChanged), for: .editingChanged)
        passwordTextField.addTarget(self, action: #selector(editingChanged), for: .editingChanged)
    }
    
    @objc func editingChanged(_ textField: UITextField) {
        if textField.text?.count == 1 && textField.text?.first == " " {
            textField.text = ""
            return
        }
        guard
            let passwordStr = passwordTextField.text, !passwordStr.isEmpty,
            let rePasswordStr = rePasswordTextField.text, !rePasswordStr.isEmpty
            else {
                savePasswordButton.activationState(active: false)
                return
        }
        savePasswordButton.activationState(active: true)
    }
    
    //    MARK: - Keyboard Show & Hide
    @objc
    func keyboardWillAppear(notification: NSNotification?) {
        
        guard let keyboardFrame = notification?.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue else {
            return
        }
        
        let keyboardHeight: CGFloat
        if #available(iOS 11.0, *) {
            keyboardHeight = keyboardFrame.cgRectValue.height - self.view.safeAreaInsets.bottom
        } else {
            keyboardHeight = keyboardFrame.cgRectValue.height
        }
        
        let deviceModel =  UIDevice().type
        switch deviceModel {
        case  .iPhone5, .iPhone5S, .iPhone5C, .iPhoneSE:
            topConstraint.constant = 100.0
            bottomConstraint.constant = keyboardHeight + 10
        case .iPhoneX, .iPhoneXR, .iPhoneXS, .iPhoneXSMax, .iPhone11, .iPhone11Pro, .iPhone11ProMax:
            bottomConstraint.constant = keyboardHeight + 50
        default:
            bottomConstraint.constant = keyboardHeight + 10
            break
        }
    }
    
    @objc
    func keyboardWillDisappear(notification: NSNotification?) {
        let deviceModel =  UIDevice().type
        switch deviceModel {
        case  .iPhone5, .iPhone5S, .iPhone5C, .iPhoneSE:
            topConstraint.constant = 125
        default:
            break
        }
        bottomConstraint.constant = 61
    }
}

//MARK: - Delegate

extension NewPasswordViewController : UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        errorView.isHidden = true
        topConstraint.constant = 66
    }
}
