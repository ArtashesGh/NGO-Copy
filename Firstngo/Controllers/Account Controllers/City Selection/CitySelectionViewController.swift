//
//  CitySelectionViewController.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 3/1/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CitySelectionDisplayLogic: class
{
    func displaySomething(viewModel: CitySelection.Something.ViewModel)
    func displayGetCountrySuccess(countries:[Countries])
    func displayGetCitySuccess(citys:[City])
    func displayError()
    func showLoader()
    func hideLoader()
}

protocol CitySelectionViewControllerDelegate: class {
    func countrySelected(countryID:UInt64, countryName:String)
    func citySelected(cityId:UInt64, cityName:String)
}

class CitySelectionViewController: UIViewController, CitySelectionDisplayLogic
{
    var interactor: CitySelectionBusinessLogic?
    var router: (NSObjectProtocol & CitySelectionRoutingLogic & CitySelectionDataPassing)?
    
    weak var delegate: CitySelectionViewControllerDelegate?
    @IBOutlet weak var searchField: TitleTextField!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var topView: UIView!
    @IBOutlet weak var searchListView: UIView!
    
    var displeyElements : [DispleySearchData] = []
    var serachCity: Bool = false
    var page = 0
    var countryId:String = ""
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CitySelectionInteractor()
        let presenter = CitySelectionPresenter()
        let router = CitySelectionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        hideKeyboardWhenTappedAround()
        doSomething()
        searchField.addTarget(self, action: #selector(textFieldDidChange), for: UIControl.Event.editingChanged)
    }

    @objc func textFieldDidChange(textField : UITextField) {
      self.displeyElements = []
       if serachCity {
           interactor?.doGetCity(page: "0", userInput: searchField.text ?? "", countryId: countryId)
       }else {
           interactor?.doGetCountry(page: "0", userInput: searchField.text ?? "")
       }
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        topView.roundCorners(corners: .bottomLeft, radius: 50)
        searchListView.roundCorners(corners:.bottomLeft, radius: 50.0)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = CitySelection.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displayGetCountrySuccess(countries:[Countries]) {
        DispatchQueue.main.async {
            var dispElement = DispleySearchData()
            for displeyElement in countries {
                dispElement.Id = displeyElement.countryId
                dispElement.titleRu = displeyElement.titleRu
                self.displeyElements.append(dispElement)
            }
            self.tableView.reloadData()
        }
    }
    
    func displayGetCitySuccess(citys:[City]) {
        DispatchQueue.main.async {
            DispatchQueue.main.async {
                var dispElement = DispleySearchData()
                for displeyElement in citys {
                    dispElement.Id = displeyElement.cityId
                    dispElement.titleRu = displeyElement.titleRu
                    self.displeyElements.append(dispElement)
                }
                self.tableView.reloadData()
            }
        }
    }
    
    func displaySomething(viewModel: CitySelection.Something.ViewModel)
    {
        serachCity = viewModel.searchCity
        if serachCity {
            titleLabel.text = "Выберите город"
            searchField.placeholder = "Выберите город"
            countryId = viewModel.countryId
            interactor?.doGetCity(page: "\(page)", userInput: searchField.text ?? "", countryId: countryId)
        }else {
            titleLabel.text = "Выберите страну"
            searchField.placeholder = "Выберите страну"
            interactor?.doGetCountry(page: "\(page)", userInput: searchField.text ?? "")
        }
        
    }
    
    func displayError() {
        //           DispatchQueue.main.async {
        //               self.errorView.isHidden = false
        //               self.topConstraint.constant = self.topErrorConstraintHeight
        //           }
    }
    
    //MARK: - Hide & Show Loader
    
    func showLoader() {
        view.showLoader()
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.view.removeLoader()
        }
    }
    @IBAction func backButtonAction(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
    }
}
extension CitySelectionViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displeyElements.count
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier:"CitySelectTableViewCell") as! CitySelectTableViewCell
        cell.title.text = displeyElements[indexPath.row].titleRu
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        if serachCity {
            delegate?.citySelected(cityId: displeyElements[indexPath.row].Id ?? 0, cityName: displeyElements[indexPath.row].titleRu ?? "")
        }else {
            delegate?.countrySelected(countryID: displeyElements[indexPath.row].Id ?? 0, countryName: displeyElements[indexPath.row].titleRu ?? "")
        }
        self.dismiss(animated: true, completion: nil)
        
    }
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if displeyElements.count-5 == indexPath.row && displeyElements.count > 6 {
            getMoreImages()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }
    
    func getMoreImages(){
        self.page += 1
        if serachCity {
            interactor?.doGetCity(page: "\(page)", userInput: searchField.text ?? "", countryId: countryId)
        }else {
            interactor?.doGetCountry(page: "\(page)", userInput: searchField.text ?? "")
        }
    }
}
