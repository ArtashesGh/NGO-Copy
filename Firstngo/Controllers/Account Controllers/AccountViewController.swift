//
//  AccountViewController.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 2/24/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountDisplayLogic: class
{
    func displaySomething(viewModel: Account.Something.ViewModel)
    func displaySaveSuccess()
    func displayError()
    func showLoader()
    func hideLoader()
}

class AccountViewController: UIViewController, AccountDisplayLogic
{
    var interactor: AccountBusinessLogic?
    var router: (NSObjectProtocol & AccountRoutingLogic & AccountDataPassing)?
    
    var displeyTableElements:[String] = ["Пользовательское соглашение", "Выйти из приложения"]//, "О приложении"]
    @IBOutlet weak var navView: UIView!
    @IBOutlet weak var accountView: UIView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var nameTextfield: TitleTextField!
    @IBOutlet weak var emailTextField: TitleTextField!
    @IBOutlet weak var mobileNumberTextField: TitleTextField!
    @IBOutlet weak var countryTextField: TitleTextField!
    @IBOutlet weak var cityTextField: TitleTextField!
    @IBOutlet weak var alertView: UIView!
    @IBOutlet weak var yesButton: UIButton!
    @IBOutlet weak var noButton: UIButton!
    @IBOutlet weak var yesButtonBackView: UIView!
    
    var countryID: UInt64?
    var cityID: UInt64?
    var isUserAgreementAccepted:Bool = false
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AccountInteractor()
        let presenter = AccountPresenter()
        let router = AccountRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        hideKeyboardWhenTappedAround()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
//        nameTextfield.languageCode = "ru";
        yesButton.roundCorners(corners: .topLeft, radius: 50)
        yesButtonBackView.roundCorners(corners: .bottomRight, radius: 10)
        navView.roundCorners(corners: .bottomLeft, radius: 50)
        accountView.roundCorners(corners:.bottomLeft, radius: 50.0)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Account.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    
    func saveProfile() {
        let user = UserUpdate(name: nameTextfield.text ?? "",
                              phoneNumber: mobileNumberTextField.text ?? "",
                              city: cityID,
                              countries: countryID,
                              userAgreementAccepted: isUserAgreementAccepted)
       
        interactor?.doSaveUser(userInfo: user)
    }
    func displaySomething(viewModel: Account.Something.ViewModel)
    {
        DispatchQueue.main.async {
            self.nameTextfield.text = viewModel.displeyElemnt.name ?? ""
            self.emailTextField.text = viewModel.displeyElemnt.email ?? ""
            
            if  viewModel.displeyElemnt.phoneNumber?.first == " " {
                self.mobileNumberTextField.text = "+" + String(viewModel.displeyElemnt.phoneNumber?.dropFirst() ?? "")
            }else {
                 self.mobileNumberTextField.text = viewModel.displeyElemnt.phoneNumber ?? ""
            }
           
            self.countryTextField.text = viewModel.displeyElemnt.countries?.titleRu ?? ""
            self.cityTextField.text = viewModel.displeyElemnt.city?.titleRu ?? ""
            self.countryID = viewModel.displeyElemnt.countries?.countryId
            self.cityID = viewModel.displeyElemnt.city?.cityId
            self.isUserAgreementAccepted = viewModel.displeyElemnt.userAgreementAccepted ?? false
            self.tableView.reloadData()
        }
    }
    
    func displaySaveSuccess() {
        DispatchQueue.main.async {
            //                    doSomething()
        }
    }
    
    
    func displayError() {
        //           DispatchQueue.main.async {
        //               self.errorView.isHidden = false
        //               self.topConstraint.constant = self.topErrorConstraintHeight
        //           }
    }
    
    //MARK: - Hide & Show Loader
    
    func showLoader() {
        view.showLoader()
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.view.removeLoader()
        }
    }
    
    
    @IBAction func countryButtonAction(_ sender: UIButton) {
        router?.dataStore?.countryId = countryID ?? 0
        router?.dataStore?.searchCity = false
        router?.routeToSearchView()
    }
    
    @IBAction func cityButtonAction(_ sender: UIButton) {
        if countryTextField.text != ""  {
            router?.dataStore?.countryId = countryID ?? 0
            router?.dataStore?.searchCity = true
            router?.routeToSearchView()
        }
    }
    @IBAction func yesButtonAction(_ sender: Any) {
        Utility.removeAllFromDefaults()
        router?.routeToWelcome()
    }
    @IBAction func noButtonAction(_ sender: Any) {
        alertView.isHidden = true
    }
}

extension AccountViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displeyTableElements.count
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier:"AccountTableViewCell") as! AccountTableViewCell
        cell.selectionStyle = .none
        cell.title.text = displeyTableElements[indexPath.row]
//        if indexPath.row == 1 {
//            cell.chekImg.isHidden = false
//        }else {
//            cell.chekImg.isHidden = true
//        }
//        if self.isUserAgreementAccepted {
//            cell.chekImg.image = UIImage.init(named: "check_ic")
//        }else {
//            cell.chekImg.image = UIImage.init(named: "unChech_ic")
//        }
        
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        if indexPath.row == 1 {
            alertView.isHidden = false
        }else if indexPath.row == 0 {
            router?.routeToTermsView()
//            if(isUserAgreementAccepted == true) {
//                isUserAgreementAccepted = false
//            } else {
//                isUserAgreementAccepted = true
//            }
            saveProfile()
            tableView.reloadData()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75
    }
}

extension AccountViewController : UITextFieldDelegate {
    func textFieldDidEndEditing(_ textField: UITextField) {
        self.saveProfile()
    }
    
}

extension AccountViewController : CitySelectionViewControllerDelegate {
    func countrySelected(countryID: UInt64, countryName: String) {
        self.countryID = countryID
        countryTextField.text = countryName
        cityTextField.text = ""
        self.saveProfile()
    }
    
    func citySelected(cityId: UInt64, cityName: String) {
        self.cityID = cityId
        cityTextField.text = cityName
        self.saveProfile()
    }
    
    
}
