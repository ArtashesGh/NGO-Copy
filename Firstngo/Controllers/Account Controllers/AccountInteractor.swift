//
//  AccountInteractor.swift
//  Firstngo
//
//  Created by Artash Ghazaryan on 2/24/20.
//  Copyright (c) 2020 Artash Ghazaryan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountBusinessLogic
{
    func doSomething(request: Account.Something.Request)
    func doSaveUser(userInfo:UserUpdate)
}

protocol AccountDataStore
{
    var countryId: UInt64 { get set }
    var searchCity: Bool { get set }
}

class AccountInteractor: AccountBusinessLogic, AccountDataStore
{
    var presenter: AccountPresentationLogic?
    var worker: AccountWorker?
    var countryId: UInt64 = 0
    var searchCity: Bool = false
    
    // MARK: Do something
    
    func doSomething(request: Account.Something.Request)
    {
        worker = AccountWorker()
//        presenter?.showLoader()
        _ = worker?.doGetProfileWork(completion: { response in
            if (response.isSuccess) {
                self.presenter?.hideLoader()
                let userInfo: [String:Any] = response.data?["object"] as! [String:Any]
                do{
                    let jsonData = try? JSONSerialization.data(withJSONObject:userInfo)
                    let user = try  JSONDecoder().decode(User.self,from: jsonData!)
                    let response = Account.Something.Response(userInfo:user)
                    self.presenter?.presentSomething(response: response)
                }catch let jsonErr {
                    print(jsonErr)
                }
            } else {
                self.presenter?.hideLoader()
                self.presenter?.presentError(error: response.errorForUser)
            }
        })
    }
    
    func doSaveUser(userInfo:UserUpdate)
    {
        worker = AccountWorker()
//        presenter?.showLoader()
        _ = worker?.doSaveProfileWork(name: userInfo.name ?? "",
                                      city: userInfo.city ?? 0,
                                      phoneNumber: userInfo.phoneNumber ?? "",
                                      country: userInfo.countries ?? 0,
                                      isUserAgreementAccepted: userInfo.userAgreementAccepted ?? false,
                                      completion: { response in
            if (response.isSuccess) {
                self.presenter?.presentSaveSucces()
//                self.presenter?.hideLoader()
//                let userInfo: [String:Any] = response.data?["object"] as! [String:Any]
//                do{
//                    let jsonData = try? JSONSerialization.data(withJSONObject:userInfo)
//                    let user = try  JSONDecoder().decode(User.self,from: jsonData!)
//                    let response = Account.Something.Response(userInfo:user)
//                    self.presenter?.presentSomething(response: response)
//                }catch let jsonErr {
//                    print(jsonErr)
//                }
            } else {
//                self.presenter?.hideLoader()
                self.presenter?.presentError(error: response.errorForUser)
            }
        })
    }
}

struct User: Codable {
    var userId:Int
    var email: String?
    var name: String?
    var phoneNumber: String?
    var city: City?
    var countries: Countries?
    var userAgreementAccepted: Bool?
}

struct City: Codable {
    var cityId: UInt64?
    var countryId: UInt64?
    var titleRu: String?
    var regionRu: String?
}

struct Countries: Codable {
    var countryId: UInt64?
    var titleRu: String?
}

struct UserUpdate: Codable {
    var name: String?
    var phoneNumber: String?
    var city: UInt64?
    var countries: UInt64?
    var userAgreementAccepted: Bool?
}

